"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Subject_1 = require("rxjs/Subject");
var SocketIO = require("nativescript-socket.io");
var singleton_service_1 = require("../singleton-service/singleton.service");
var common_functions_service_1 = require("../common-functions-service/common-functions.service");
var SocketService = /** @class */ (function () {
    function SocketService(ngZone, singleton, cfs) {
        this.ngZone = ngZone;
        this.singleton = singleton;
        this.cfs = cfs;
        this.userBadge = 0;
        this.selectedUsers = {};
        this.listUsers = [];
        this.formTools = new core_1.EventEmitter();
        this.emitChangeSource = new Subject_1.Subject();
        this.changeEmitted$ = this.emitChangeSource.asObservable();
        this.emitChangeUsers = new Subject_1.Subject();
        this.changeUsersEmitted$ = this.emitChangeUsers.asObservable();
        this.intialized = false;
    }
    SocketService.prototype.initSocket = function () {
        var _this = this;
        // marcamos a variável this.intialized para true, para que o socket não seja iniciado mais de uma vez
        this.intialized = true;
        // pedimos conexão do socket para o servidor
        // OBS: passamos o token do usuário para que o token seja validado na hora da conexão ao socket
        this.socket = SocketIO.connect(this.singleton.serverUrl, { query: { 'Authorization': localStorage.getItem('token') } });
        // Evento responsável por ouvir logins de usuários
        this.socket.on('userlogin', function (userLogin) {
            var _this = this;
            console.log("Login de usuário com o id: " + userLogin._id);
            this.ngZone.run(function () {
                // verifico se o id do usuário que efetuou login é igual ao nosso, para que não sejamos notificados do nosso proprio  login em outro dispositivo
                if (userLogin._id != _this.singleton.user["_id"]) {
                    // se for diferente, preciso achar o usuário que efetuou o login e tornar o status dele para true(online)
                    _this.listUsers.map(function (user) {
                        if (user._id == userLogin._id) {
                            if (!user.status) {
                                user.status = true;
                            }
                        }
                    });
                    // ordenamos nossa lista de usuários pelo status
                }
                _this.listUsers = _this.cfs.orderByProperty(_this.listUsers, 'status');
                _this.emitChangeUsers.next();
            });
        }.bind(this));
        // lista dos usuários cadastrados no sistema
        this.socket.on('listUsers', function (listUsers) {
            _this.ngZone.run(function () {
                _this.listUsers = listUsers.all;
                _this.listUsers.map(function (user) {
                    // pegamos o número da badge do usuário e passamos para o objeto user
                    user["badge"] = listUsers["userBadge"][user._id] || 0;
                    _this.singleton.chatBadge += user["badge"];
                    // verificamos se o id do usuário está na lista de usuários online, se estiver, tornamos o status dele para true
                    if (listUsers.available.indexOf(user._id) > -1) {
                        user.status = true;
                    }
                });
                // ordenamos nossa lista de usuários pelo status
                _this.listUsers = _this.cfs.orderByProperty(_this.listUsers, 'status');
                // emitimos um sinal para nosso chatComponent, para dizer que temos uma lista de usuários disponivel para ele
                _this.emitChangeUsers.next();
            });
        });
        // Evento responsável por ouvir leituras dos usuários a mensagens que você enviou
        this.socket.on('receiverRead', function (userId) {
            console.log("recebeu leitura do usuário: " + userId);
            _this.ngZone.run(function () {
                if (_this.selectedUsers[userId]) {
                    var currentDate = Date.now();
                    _this.selectedUsers[userId].messages.forEach(function (element) {
                        if (element.toUser == userId && !element["toUserRead"]) {
                            element["toUserRead"] = true;
                            element["toUserReadDate"] = currentDate;
                            _this.emitChangeSource.next();
                        }
                    });
                }
            });
        });
        // Evento responsável por ouvir logout de usuários
        this.socket.on('userLogout', function (userId) {
            _this.ngZone.run(function () {
                _this.listUsers.map(function (user) {
                    if (user._id == userId) {
                        user.status = false;
                    }
                });
                _this.listUsers = _this.cfs.orderByProperty(_this.listUsers, 'status');
                _this.emitChangeUsers.next();
            });
        });
        // Evento responsável por ouvir o novas mensagens
        this.socket.on('newMessage', function (message) {
            console.log("new message...");
            _this.ngZone.run(function () {
                if (message._id == _this.singleton.user["_id"] && _this.selectedUsers[message.toUser]) {
                    _this.selectedUsers[message.toUser]["messages"].push(message);
                    if (_this.selectedUsers[message.toUser]["chatOpen"]) {
                        _this.emitChangeSource.next();
                    }
                }
                else {
                    if (!_this.selectedUsers[message._id]) {
                        for (var i = 0; i < _this.listUsers.length; i++) {
                            if (_this.listUsers[i]["_id"] == message._id) {
                                _this.listUsers[i]["badge"]++;
                                _this.singleton.chatBadge++;
                                _this.emitChangeUsers.next();
                                break;
                            }
                        }
                    }
                    else {
                        _this.selectedUsers[message._id]["messages"].push(message);
                        if (_this.selectedUsers[message._id]["chatOpen"]) {
                            _this.emmitFocus({ room_id: _this.selectedUsers[message._id]["room_id"], updateAll: false, senderId: message._id });
                            message["toUserRead"] = true;
                            _this.emitChangeSource.next();
                        }
                        else {
                            _this.singleton.chatBadge++;
                            console.log("incrementing the badge...");
                            _this.selectedUsers[message._id]["badge"] = _this.selectedUsers[message._id]["badge"] + 1;
                            console.log("the badge now is: " + _this.selectedUsers[message._id]["badge"]);
                            _this.emitChangeUsers.next();
                        }
                    }
                }
            });
        });
    };
    // evento responsável por emitir o focus, ou seja, confirmar leitura de das mensagens
    SocketService.prototype.emmitFocus = function (obj) {
        var _this = this;
        this.ngZone.run(function () {
            if (_this.selectedUsers[obj["senderId"]]["messages"]) {
                _this.socket.emit('focus', obj["room_id"]);
                if (obj["updateAll"]) {
                    _this.selectedUsers[obj["senderId"]]["messages"].forEach(function (element) {
                        if (element._id == obj["senderId"]) {
                            element["toUserRead"] = true;
                        }
                    });
                }
                _this.singleton.chatBadge = _this.singleton.chatBadge - _this.selectedUsers[obj["senderId"]]["badge"];
                _this.selectedUsers[obj["senderId"]]["badge"] = 0;
            }
        });
    };
    // Evento responsável emitir para o servidor a seleção de um usuário
    SocketService.prototype.emmitSelect = function (_id) {
        var _this = this;
        console.log("user id:" + _id);
        return new Promise(function (resolve) {
            _this.socket.emit('selectUser', { _id: _this.singleton.user["_id"], toUser: _id }, function (room) {
                _this.ngZone.run(function () {
                    _this.selectedUsers[_id]["messages"] = room["messages"] || [];
                    _this.selectedUsers[_id]["room_id"] = room["_id"];
                    _this.emmitFocus({ room_id: room["_id"], senderId: _id, updateAll: true });
                    return resolve();
                });
            });
        });
    };
    // Evento responsável por se desconectar do servidor
    SocketService.prototype.disconect = function () {
        this.intialized = false;
        this.socket.disconect();
    };
    // Evento responsável por emitir uma mensagem para o servidor
    SocketService.prototype.sendMessage = function (arr) {
        this.socket.emit('sendMessage', { room_id: arr[2], name: this.singleton.user["name"], _id: this.singleton.user["_id"], message: arr[0], toUser: arr[1], date: Date.now(), toUserRead: false });
    };
    SocketService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [core_1.NgZone, singleton_service_1.SingletonService, common_functions_service_1.CommonFunctionsService])
    ], SocketService);
    return SocketService;
}());
exports.SocketService = SocketService;
//# sourceMappingURL=data:application/json;base64,